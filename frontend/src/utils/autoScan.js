/**
 * Escaneo autom√°tico desde la consola del navegador
 * Se ejecuta autom√°ticamente al cargar
 */

// Funci√≥n para escaneo autom√°tico inmediato
async function runImmediatePrinterScan() {
  console.log('üîç ESCANEO AUTOM√ÅTICO DE IMPRESORAS INICIADO');
  console.log('=============================================');
  
  // IPs m√°s comunes para impresoras
  const commonIPs = [
    '192.168.1.23',  // La configurada originalmente
    '192.168.1.100', '192.168.1.101', '192.168.1.102',
    '192.168.1.200', '192.168.1.201', '192.168.1.202', 
    '192.168.1.10', '192.168.1.11', '192.168.1.12',
    '192.168.1.20', '192.168.1.21', '192.168.1.22', '192.168.1.24', '192.168.1.25',
    '192.168.0.100', '192.168.0.101', '192.168.0.200'
  ];
  
  console.log(`üì° Probando ${commonIPs.length} IPs comunes para impresoras...`);
  
  const foundPrinters = [];
  let testsCompleted = 0;
  
  // Procesar en lotes peque√±os para evitar saturar
  const batchSize = 5;
  
  for (let i = 0; i < commonIPs.length; i += batchSize) {
    const batch = commonIPs.slice(i, i + batchSize);
    
    console.log(`üîÑ Probando lote ${Math.floor(i/batchSize) + 1}/${Math.ceil(commonIPs.length/batchSize)}: ${batch.join(', ')}`);
    
    const batchPromises = batch.map(async (ip) => {
      try {
        if (window.apiClient) {
          const response = await window.apiClient.post('/kitchen/test_printer/', {
            printer_ip: ip,
            printer_port: 9100
          });
          
          if (response.data.success) {
            foundPrinters.push(ip);
            console.log(`üñ®Ô∏è ¬°IMPRESORA ENCONTRADA EN ${ip}!`);
            console.log(`   üìÑ Respuesta: ${response.data.message}`);
            return { ip, success: true, message: response.data.message };
          }
        }
      } catch (error) {
        if (error.response?.status !== 500) {
          console.log(`‚ö†Ô∏è ${ip}: Error ${error.response?.status || 'de red'}`);
        }
      }
      testsCompleted++;
      return { ip, success: false };
    });
    
    await Promise.allSettled(batchPromises);
    
    // Pausa entre lotes para no saturar
    if (i + batchSize < commonIPs.length) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  console.log('\nüìä RESULTADOS DEL ESCANEO AUTOM√ÅTICO:');
  console.log('=====================================');
  
  if (foundPrinters.length > 0) {
    console.log(`‚úÖ ¬°IMPRESORAS ENCONTRADAS: ${foundPrinters.length}!`);
    foundPrinters.forEach(ip => {
      console.log(`   üñ®Ô∏è ${ip}:9100`);
    });
    
    console.log('\nüéØ PARA USAR LA IMPRESORA:');
    console.log(`setPrinterIP('${foundPrinters[0]}')`);
    console.log('Luego recarga la p√°gina y prueba imprimir');
    
    // Auto-configurar la primera impresora encontrada
    if (foundPrinters.length === 1) {
      localStorage.setItem('printer_ip', foundPrinters[0]);
      console.log(`üîß Auto-configurada: ${foundPrinters[0]}`);
      console.log('üîÑ Recarga la p√°gina para aplicar');
    }
    
  } else {
    console.log('‚ùå No se encontraron impresoras en IPs comunes');
    console.log('\nüîç OPCIONES ADICIONALES:');
    console.log('‚Ä¢ scanPrinterRange("192.168.1", 1, 254) - Escaneo completo');
    console.log('‚Ä¢ testPrinterWithIP("X.X.X.X") - Probar IP espec√≠fica'); 
    console.log('‚Ä¢ Cambiar a Bluetooth temporalmente');
    
    console.log('\nüí° POSIBLES CAUSAS:');
    console.log('‚Ä¢ Impresora apagada o desconectada');
    console.log('‚Ä¢ IP fuera del rango com√∫n');
    console.log('‚Ä¢ Red aislada o VLAN diferente');
  }
  
  console.log(`\n‚úÖ Escaneo completado: ${testsCompleted}/${commonIPs.length} IPs probadas`);
  return foundPrinters;
}

// Funci√≥n para auto-ejecutar despu√©s de un delay
setTimeout(() => {
  if (window.apiClient && document.readyState === 'complete') {
    console.log('üöÄ Ejecutando escaneo autom√°tico en 3 segundos...');
    setTimeout(runImmediatePrinterScan, 3000);
  }
}, 2000);

// Exponer funci√≥n globalmente
window.runAutoScan = runImmediatePrinterScan;