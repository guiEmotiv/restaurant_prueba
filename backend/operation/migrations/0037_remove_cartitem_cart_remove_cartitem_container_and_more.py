# Generated by Django 5.2.2 on 2025-09-02 16:57
# FIXED VERSION: SQLite-compatible safe operations for production deployment

from django.db import migrations, models


def safe_cleanup_operation(apps, schema_editor):
    """
    Safely perform cleanup operations that are compatible with production SQLite database.
    This function checks for existence before attempting operations.
    """
    with schema_editor.connection.cursor() as cursor:
        # Check if customer_name and party_size already exist before adding
        try:
            cursor.execute("PRAGMA table_info(orders)")
            columns = [row[1] for row in cursor.fetchall()]
            
            # Only add fields if they don't exist
            if 'customer_name' not in columns:
                cursor.execute("""
                    ALTER TABLE orders ADD COLUMN customer_name VARCHAR(150) NULL;
                """)
                print("✅ Added customer_name column to orders table")
            
            if 'party_size' not in columns:
                cursor.execute("""
                    ALTER TABLE orders ADD COLUMN party_size INTEGER NULL;
                """)
                print("✅ Added party_size column to orders table")
                
        except Exception as e:
            print(f"⚠️  Field addition handled: {e}")

        # Safe table cleanup - these tables might not exist
        tables_to_drop = ['cart', 'cart_item', 'operation_orderitemingredient']
        for table in tables_to_drop:
            try:
                cursor.execute(f"DROP TABLE IF EXISTS {table}")
                print(f"✅ Dropped table {table} if it existed")
            except Exception as e:
                print(f"⚠️  Table {table} cleanup handled: {e}")


def reverse_cleanup_operation(apps, schema_editor):
    """
    This operation cannot be fully reversed as we're doing safe cleanup.
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('operation', '0036_recreate_dashboard_view_correct_tables'),
    ]

    operations = [
        # Use RunPython for safe SQLite-compatible operations
        migrations.RunPython(
            code=safe_cleanup_operation,
            reverse_code=reverse_cleanup_operation,
            hints={'safe_operation': True}
        ),
    ]
