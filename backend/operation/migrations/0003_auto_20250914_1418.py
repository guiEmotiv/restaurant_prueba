# Generated by Django 5.2.2 on 2025-09-14 19:18

from django.db import migrations


def create_dashboard_views(apps, schema_editor):
    """
    Crear vistas optimizadas para los dashboards operativo y financiero
    """
    db_alias = schema_editor.connection.alias

    with schema_editor.connection.cursor() as cursor:
        # Crear vista principal para dashboard operativo
        # Columnas exactas que espera el ViewSet: order_id, order_total, order_status, waiter, operational_date,
        # item_id, quantity, unit_price, total_price, total_with_container, item_status, is_takeaway,
        # recipe_name, category_name, category_id, payment_method, payment_amount, created_at, paid_at
        cursor.execute("""
            CREATE VIEW IF NOT EXISTS dashboard_operativo_view AS
            SELECT
                -- Columnas en el orden exacto que espera el ViewSet
                o.id as order_id,
                o.total_amount as order_total,
                o.status as order_status,
                o.waiter,
                DATE(o.created_at) as operational_date,

                oi.id as item_id,
                oi.quantity,
                oi.unit_price,
                oi.total_price,
                (oi.total_price * oi.quantity) as total_with_container,
                oi.status as item_status,
                oi.is_takeaway,

                r.name as recipe_name,
                COALESCE(g.name, 'Sin Categoría') as category_name,
                COALESCE(g.id, 0) as category_id,

                p.payment_method,
                p.amount as payment_amount,
                o.created_at,
                o.paid_at

            FROM "order" o
            LEFT JOIN order_item oi ON o.id = oi.order_id
            LEFT JOIN recipe r ON oi.recipe_id = r.id
            LEFT JOIN "group" g ON r.group_id = g.id
            LEFT JOIN payment p ON o.id = p.order_id
            WHERE o.status IS NOT NULL
            ORDER BY o.created_at DESC, oi.id
        """)

        # Crear vista para dashboard financiero (reutiliza la operativa)
        cursor.execute("""
            CREATE VIEW IF NOT EXISTS dashboard_financiero_view AS
            SELECT
                -- Agrupaciones temporales para análisis financiero
                operational_date,
                order_hour,
                day_of_week,

                -- Métricas financieras agregadas
                COUNT(DISTINCT order_id) as total_orders,
                COUNT(DISTINCT CASE WHEN order_status = 'PAID' THEN order_id END) as paid_orders,
                COUNT(DISTINCT CASE WHEN order_status = 'CANCELED' THEN order_id END) as canceled_orders,

                -- Ingresos
                SUM(CASE WHEN order_status = 'PAID' THEN item_total ELSE 0 END) as total_revenue,
                SUM(CASE WHEN order_status = 'PAID' THEN payment_amount ELSE 0 END) as total_payments,

                -- Métricas por método de pago
                SUM(CASE WHEN payment_method = 'CASH' THEN payment_amount ELSE 0 END) as cash_payments,
                SUM(CASE WHEN payment_method = 'CARD' THEN payment_amount ELSE 0 END) as card_payments,
                SUM(CASE WHEN payment_method = 'TRANSFER' THEN payment_amount ELSE 0 END) as transfer_payments,

                -- Métricas operativas
                COUNT(order_item_id) as total_items,
                SUM(quantity) as total_quantity,
                AVG(preparation_time_minutes) as avg_preparation_time,

                -- Métricas de productos
                COUNT(DISTINCT recipe_id) as unique_recipes_sold

            FROM dashboard_operativo_view
            GROUP BY operational_date, order_hour, day_of_week
            ORDER BY operational_date DESC, order_hour DESC
        """)


def drop_dashboard_views(apps, schema_editor):
    """
    Eliminar las vistas de dashboard
    """
    db_alias = schema_editor.connection.alias

    with schema_editor.connection.cursor() as cursor:
        cursor.execute("DROP VIEW IF EXISTS dashboard_financiero_view")
        cursor.execute("DROP VIEW IF EXISTS dashboard_operativo_view")


class Migration(migrations.Migration):

    dependencies = [
        ('operation', '0002_add_print_confirmed'),
    ]

    operations = [
        migrations.RunPython(
            create_dashboard_views,
            drop_dashboard_views,
            hints={'operation': 'dashboard_views'}
        ),
    ]
