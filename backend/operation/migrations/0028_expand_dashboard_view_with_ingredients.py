# Generated by Django 5.2.2 on 2025-08-26 21:03

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('operation', '0027_add_total_with_container_to_dashboard_view'),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
            DROP VIEW IF EXISTS dashboard_operativo_view;
            """,
            reverse_sql="-- No reverse needed, will be recreated"
        ),
        migrations.RunSQL(
            sql="""
            CREATE VIEW dashboard_operativo_view AS
            SELECT 
                -- Datos básicos de orden
                o.id as order_id,
                o.created_at,
                o.served_at,
                o.paid_at,
                o.total_amount as order_total,
                o.status as order_status,
                o.waiter,
                o.observations as order_observations,
                
                -- Datos de mesa y zona
                t.id as table_id,
                t.table_number,
                t.capacity as table_capacity,
                z.id as zone_id,
                z.name as zone_name,
                z.description as zone_description,
                
                -- Datos de order item
                oi.id as item_id,
                oi.quantity,
                oi.unit_price,
                oi.total_price,
                CASE 
                    WHEN oi.container_id IS NOT NULL AND oi.container_price IS NOT NULL 
                    THEN oi.total_price + (oi.container_price * oi.quantity)
                    WHEN oi.has_taper = 1 THEN (
                        SELECT oi.total_price + COALESCE(
                            (SELECT cs.unit_price * cs.quantity 
                             FROM container_sale cs 
                             WHERE cs.order_id = o.id 
                               AND cs.quantity = oi.quantity 
                               AND cs.created_at >= oi.created_at
                             ORDER BY cs.created_at 
                             LIMIT 1), 0)
                    )
                    ELSE oi.total_price
                END as total_with_container,
                oi.status as item_status,
                oi.notes as item_notes,
                oi.is_takeaway,
                oi.has_taper,
                oi.created_at as item_created_at,
                oi.preparing_at,
                oi.container_id,
                oi.container_price,
                
                -- Datos completos de receta
                r.id as recipe_id,
                r.name as recipe_name,
                r.version as recipe_version,
                r.base_price,
                r.preparation_time,
                r.difficulty_level,
                r.serving_size,
                r.calories,
                r.is_active as recipe_active,
                r.is_available as recipe_available,
                r.description as recipe_description,
                r.instructions as recipe_instructions,
                r.tags as recipe_tags,
                r.created_at as recipe_created_at,
                r.updated_at as recipe_updated_at,
                
                -- Datos completos de categoría/grupo
                g.id as category_id,
                g.name as category_name,
                g.description as category_description,
                g.is_active as category_active,
                g.sort_order as category_sort,
                g.color as category_color,
                g.created_at as category_created_at,
                
                -- Datos de unidades para la receta
                u.id as unit_id,
                u.name as unit_name,
                u.abbreviation as unit_abbreviation,
                u.unit_type,
                
                -- Datos de contenedores
                c.id as container_real_id,
                c.name as container_name,
                c.unit_price as container_unit_price,
                c.is_active as container_active,
                
                -- Ingredientes de la receta (JSON aggregated)
                (SELECT GROUP_CONCAT(
                    json_object(
                        'ingredient_id', ing.id,
                        'ingredient_name', ing.name,
                        'quantity', ri.quantity,
                        'unit_name', unit_ing.name,
                        'unit_abbr', unit_ing.abbreviation,
                        'cost_per_unit', ing.cost_per_unit,
                        'total_cost', ri.quantity * ing.cost_per_unit,
                        'is_primary', ri.is_primary,
                        'category', ing.category,
                        'supplier', ing.supplier,
                        'is_active', ing.is_active
                    )
                ) FROM recipe_ingredient ri
                  LEFT JOIN ingredient ing ON ri.ingredient_id = ing.id
                  LEFT JOIN unit unit_ing ON ing.unit_id = unit_ing.id
                  WHERE ri.recipe_id = r.id
                ) as recipe_ingredients_json,
                
                -- Costo total de ingredientes
                (SELECT SUM(ri.quantity * ing.cost_per_unit)
                 FROM recipe_ingredient ri
                 LEFT JOIN ingredient ing ON ri.ingredient_id = ing.id
                 WHERE ri.recipe_id = r.id
                ) as recipe_total_ingredient_cost,
                
                -- Margen de ganancia
                (r.base_price - COALESCE((
                    SELECT SUM(ri.quantity * ing.cost_per_unit)
                    FROM recipe_ingredient ri
                    LEFT JOIN ingredient ing ON ri.ingredient_id = ing.id
                    WHERE ri.recipe_id = r.id
                ), 0)) as recipe_profit_margin,
                
                -- Datos de pago
                (SELECT payment_method
                 FROM payment p1
                 WHERE p1.order_id = o.id
                 ORDER BY p1.created_at DESC
                 LIMIT 1) as payment_method,
                (SELECT amount
                 FROM payment p2
                 WHERE p2.order_id = o.id
                 ORDER BY p2.created_at DESC
                 LIMIT 1) as payment_amount,
                (SELECT created_at
                 FROM payment p3
                 WHERE p3.order_id = o.id
                 ORDER BY p3.created_at DESC
                 LIMIT 1) as payment_date,
                
                -- Métricas de tiempo
                CASE
                    WHEN o.created_at IS NOT NULL AND o.paid_at IS NOT NULL
                    THEN CAST((julianday(o.paid_at) - julianday(o.created_at)) * 24 * 60 AS INTEGER)
                    ELSE NULL
                END as service_time_minutes,
                
                CASE
                    WHEN oi.created_at IS NOT NULL
                    THEN CAST((julianday('now') - julianday(oi.created_at)) * 24 * 60 AS INTEGER)
                    ELSE NULL
                END as item_age_minutes,
                
                -- Clasificaciones temporales
                DATE(COALESCE(o.paid_at, o.created_at)) as operational_date,
                
                CASE
                    WHEN strftime('%H', o.created_at) BETWEEN '06' AND '11' THEN 'desayuno'
                    WHEN strftime('%H', o.created_at) BETWEEN '12' AND '15' THEN 'almuerzo'
                    WHEN strftime('%H', o.created_at) BETWEEN '16' AND '18' THEN 'lonche'
                    WHEN strftime('%H', o.created_at) BETWEEN '19' AND '23' THEN 'cena'
                    ELSE 'madrugada'
                END as meal_period,
                
                CASE strftime('%w', o.created_at)
                    WHEN '0' THEN 'domingo'
                    WHEN '1' THEN 'lunes'
                    WHEN '2' THEN 'martes'
                    WHEN '3' THEN 'miércoles'
                    WHEN '4' THEN 'jueves'
                    WHEN '5' THEN 'viernes'
                    WHEN '6' THEN 'sábado'
                END as day_of_week
                
            FROM "order" o
            LEFT JOIN "table" t ON o.table_id = t.id
            LEFT JOIN zone z ON t.zone_id = z.id
            LEFT JOIN order_item oi ON o.id = oi.order_id
            LEFT JOIN recipe r ON oi.recipe_id = r.id
            LEFT JOIN "group" g ON r.group_id = g.id
            LEFT JOIN unit u ON r.unit_id = u.id
            LEFT JOIN container c ON oi.container_id = c.id
            
            ORDER BY o.created_at DESC, oi.id;
            """,
            reverse_sql="""
            DROP VIEW IF EXISTS dashboard_operativo_view;
            """
        )
    ]
