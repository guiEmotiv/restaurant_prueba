name: Direct Deploy to Production

on:
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: restaurant-web

jobs:
  deploy-direct:
    runs-on: ubuntu-latest
    name: Direct Deployment
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        known_hosts: unnecessary
        
    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_PROD_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy directly to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_PROD_HOST }}
        EC2_USER: ${{ secrets.EC2_USERNAME }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        VERSION: prod-latest
      run: |
        echo "🚀 Starting direct deployment..."
        
        # Execute all commands directly on EC2
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'DEPLOY'
        export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin"
        
        cd /opt/restaurant-web || exit 1
        
        # Create directories
        mkdir -p data backups logs
        
        # Backup database if exists
        if [ -f data/restaurant_prod.sqlite3 ]; then
          BACKUP_DIR="backups/backup-$(date +%Y%m%d-%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          cp data/restaurant_prod.sqlite3 "$BACKUP_DIR/"
          echo "✅ Database backed up"
        fi
        
        # Create .env.ec2 file directly
        cat > .env.ec2 << 'ENVFILE'
        AWS_REGION=${{ env.AWS_REGION }}
        COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_APP_CLIENT_ID=${{ secrets.COGNITO_APP_CLIENT_ID }}
        DATABASE_PATH=/opt/restaurant-web/data
        DATABASE_NAME=restaurant_prod.sqlite3
        DEBUG=False
        USE_COGNITO_AUTH=True
        ALLOWED_HOSTS=${{ secrets.EC2_PROD_HOST }},${{ secrets.DOMAIN_NAME }}
        SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
        EC2_PUBLIC_IP=${{ secrets.EC2_PROD_HOST }}
        ENVFILE
        
        # Login to ECR
        echo "🔐 Logging into ECR..."
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
        docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
        
        # Pull latest image
        echo "📥 Pulling image..."
        docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:prod-latest
        
        # Download docker-compose.yml
        echo "📥 Downloading docker-compose..."
        curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml -o docker-compose.yml
        
        # Update docker-compose.yml with the new image
        sed -i "s|image: restaurant-web:.*|image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:prod-latest|g" docker-compose.yml
        
        # Stop existing containers
        echo "⏹️ Stopping existing services..."
        docker-compose --profile production down --timeout 30 || true
        
        # Start services
        echo "🚀 Starting services..."
        docker-compose --profile production up -d
        
        # Wait for initialization
        echo "⏳ Waiting 45 seconds..."
        sleep 45
        
        # Run migrations
        echo "🗄️ Running migrations..."
        docker-compose exec -T app python manage.py migrate
        
        # Collect static files  
        echo "📁 Collecting static files..."
        docker-compose exec -T app python manage.py collectstatic --noinput
        
        # Health check
        echo "🏥 Health check..."
        curl -f -s http://localhost/api/v1/health/ || echo "Health check failed"
        
        # Show status
        docker-compose --profile production ps
        
        echo "✅ Deployment completed"
        DEPLOY