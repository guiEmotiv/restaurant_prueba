name: 🚀 Main CI/CD Pipeline

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker/**'
      - 'Dockerfile*'
      - '.github/workflows/main-deployment.yml'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        type: choice
        default: 'deploy'
        options:
          - deploy          # Normal deployment
          - rollback        # Rollback to previous version
          - rebuild         # Total rebuild (emergency)
          - test-only       # Only run tests
      skip_tests:
        description: 'Skip tests (emergency only)'
        type: boolean
        default: false

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: 721063839441.dkr.ecr.us-west-2.amazonaws.com
  ECR_REPOSITORY: restaurant-web
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🧪 TESTS (runs on PRs and optionally on push)
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  
  test:
    if: |
      github.event_name == 'pull_request' || 
      github.event.inputs.action == 'test-only' ||
      (github.event.inputs.skip_tests != 'true' && github.event.inputs.action != 'rebuild')
    runs-on: ubuntu-latest
    name: 🧪 Test Suite
    steps:
    - uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 💾 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 🧪 Run Backend Tests
      run: |
        cd backend
        pip install -r requirements.txt
        python manage.py test --no-input --parallel || true
        
    - name: 🧪 Run Frontend Tests
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
        npm test -- --passWithNoTests || true

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🏗️ BUILD & DEPLOY (only on main branch push or manual trigger)
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  
  deploy:
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action != 'test-only')
    needs: [test]
    runs-on: ubuntu-latest
    name: 🚀 Build & Deploy
    environment: production
    concurrency:
      group: production
      cancel-in-progress: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: 🔐 Configure AWS
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: 🚢 Login to ECR
      id: ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: 💾 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 🎨 Build Frontend
      env:
        VITE_AWS_COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
        VITE_AWS_COGNITO_APP_CLIENT_ID: ${{ secrets.COGNITO_APP_CLIENT_ID }}
        VITE_DISABLE_COGNITO: true
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
        npm run build
        
    - name: 🐳 Build & Push Docker Image
      env:
        ECR_REGISTRY: ${{ steps.ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build image
        docker build \
          --build-arg VITE_AWS_COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }} \
          --build-arg VITE_AWS_COGNITO_APP_CLIENT_ID=${{ secrets.COGNITO_APP_CLIENT_ID }} \
          --build-arg VITE_DISABLE_COGNITO=false \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          -f Dockerfile.prod .
          
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: 🚀 Deploy to EC2
      env:
        ACTION: ${{ github.event.inputs.action || 'deploy' }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_PROD_HOST }} >> ~/.ssh/known_hosts
        
        # Deploy
        ssh -o ConnectTimeout=30 ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_PROD_HOST }} << 'DEPLOY'
        set -e
        export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        
        # Set AWS credentials
        export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        export AWS_DEFAULT_REGION="us-west-2"
        
        cd /opt/restaurant-web
        
        # Update code
        git fetch origin main
        git reset --hard origin/main
        
        # Fix database permissions (CRITICAL FIX)
        sudo chown -R ubuntu:ubuntu /opt/restaurant-web/data/
        sudo chmod 755 /opt/restaurant-web/data/
        sudo chmod 664 /opt/restaurant-web/data/*.sqlite3 2>/dev/null || true
        
        # Make scripts executable
        chmod +x scripts/*.sh deploy/*.sh
        
        # Choose action
        ACTION="${{ env.ACTION }}"
        if [ "$ACTION" = "rebuild" ]; then
          echo "🏗️ Executing total rebuild..."
          ./scripts/total-rebuild-deploy.sh "${{ env.ECR_REGISTRY }}" "${{ env.ECR_REPOSITORY }}"
        elif [ -f "deploy/enterprise-deploy.sh" ]; then
          echo "🚀 Executing Enterprise Deployment v3.0..."
          ./deploy/enterprise-deploy.sh "${{ env.ECR_REGISTRY }}" "${{ env.ECR_REPOSITORY }}" "$ACTION"
        elif [ -f "scripts/devops-deploy.sh" ]; then
          echo "🚀 Executing DevOps deployment..."
          ./scripts/devops-deploy.sh "${{ env.ECR_REGISTRY }}" "${{ env.ECR_REPOSITORY }}" "$ACTION"
        else
          echo "🚀 Executing legacy deployment..."
          ./scripts/simple-deploy.sh "${{ env.ECR_REGISTRY }}" "${{ env.ECR_REPOSITORY }}" "$ACTION"
        fi
        DEPLOY
        
    - name: ✅ Validate Deployment
      if: success()
      run: |
        sleep 30
        
        # Test endpoints
        curl -f -s -m 15 "http://${{ secrets.EC2_PROD_HOST }}/api/v1/orders/kitchen_board/" || exit 1
        echo "✅ API is working"
        
        # Test HTTPS if available
        curl -f -s -m 15 "https://www.xn--elfogndedonsoto-zrb.com" 2>/dev/null && echo "✅ HTTPS is working" || echo "⚠️ HTTPS not configured"
        
    - name: 📊 Summary
      if: always()
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Action:** ${{ github.event.inputs.action || 'deploy' }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🌐 Links" >> $GITHUB_STEP_SUMMARY
        echo "- [Production Site](https://www.xn--elfogndedonsoto-zrb.com/)" >> $GITHUB_STEP_SUMMARY
        echo "- [API Endpoint](https://www.xn--elfogndedonsoto-zrb.com/api/v1/)" >> $GITHUB_STEP_SUMMARY