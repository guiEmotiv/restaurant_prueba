name: Deploy Restaurant Web (Simplified)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: restaurant-web

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build frontend
      run: |
        cd frontend
        npm ci --production=false
        NODE_OPTIONS='--max-old-space-size=4096' npm run build

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Build image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "✅ Image pushed to ECR"

    - name: Deploy to EC2
      env:
        EC2_HOST: ${{ secrets.EC2_PROD_HOST }}
        EC2_USER: ${{ secrets.EC2_USERNAME }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts
        
        # Deploy on EC2
        ssh $EC2_USER@$EC2_HOST << EOF
        set -e
        
        cd /opt/restaurant-web
        
        # Create .env file
        cat > .env.ec2 << 'ENVEOF'
        AWS_REGION=${{ env.AWS_REGION }}
        COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_APP_CLIENT_ID=${{ secrets.COGNITO_APP_CLIENT_ID }}
        DATABASE_PATH=/opt/restaurant-web/data
        DATABASE_NAME=restaurant_prod.sqlite3
        DEBUG=False
        USE_COGNITO_AUTH=True
        ALLOWED_HOSTS=${{ secrets.EC2_PROD_HOST }},${{ secrets.DOMAIN_NAME }}
        SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        ENVEOF
        
        # Backup database
        mkdir -p data backups
        if [ -f data/restaurant_prod.sqlite3 ]; then
          cp data/restaurant_prod.sqlite3 "backups/backup-\$(date +%Y%m%d-%H%M%S).sqlite3"
        fi
        
        # Login to ECR
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
        
        # Pull latest image
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Update docker-compose.yml
        curl -sSL https://raw.githubusercontent.com/guiEmotiv/restaurant-web/main/docker-compose.yml -o docker-compose.yml
        sed -i "s|image: restaurant-web:latest|image: $ECR_REGISTRY/$ECR_REPOSITORY:latest|g" docker-compose.yml
        
        # Update nginx config
        mkdir -p nginx/conf.d
        curl -sSL https://raw.githubusercontent.com/guiEmotiv/restaurant-web/main/nginx/conf.d/default.conf -o nginx/conf.d/default.conf
        
        # Restart services
        docker-compose --profile production down --timeout 20 || true
        docker-compose --profile production up -d
        
        # Health check
        echo "🏥 Checking health..."
        sleep 30
        
        if curl -f -s http://localhost:8000/api/v1/health/; then
          echo "✅ Deployment successful!"
          docker-compose --profile production ps
        else
          echo "❌ Health check failed"
          docker-compose --profile production logs --tail=50
          exit 1
        fi
        EOF

    - name: Summary
      if: always()
      run: |
        echo "🎯 DEPLOYMENT SUMMARY"
        echo "===================="
        echo "Status: ${{ job.status }}"
        echo "Deployed by: ${{ github.actor }}"
        echo "Branch: ${{ github.ref_name }}"