name: EC2 Maintenance Operations

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Maintenance operation'
        required: true
        type: choice
        options:
          - inspect          # Deep environment inspection
          - cleanup          # Environment cleanup  
          - deep-cleanup     # AGGRESSIVE cleanup (removes chaotic files)
          - fresh-setup      # HYBRID: Complete rebuild with data preservation (RECOMMENDED)
          - emergency        # Emergency cleanup (disk space)
          - restart          # Restart services
          - health-check     # Health check only
      confirm:
        description: 'Type "CONFIRM" to proceed with destructive operations'
        required: false
        default: ''
      analysis_level:
        description: 'Inspection depth (for inspect operation)'
        type: choice
        default: 'detailed'
        options:
          - basic
          - detailed
          - full

env:
  AWS_REGION: us-west-2

jobs:
  validate:
    runs-on: ubuntu-latest
    name: Validate Operation
    outputs:
      operation: ${{ steps.validate.outputs.operation }}
      confirmed: ${{ steps.validate.outputs.confirmed }}
      
    steps:
    - name: Validate inputs
      id: validate
      run: |
        OPERATION="${{ github.event.inputs.operation }}"
        CONFIRM="${{ github.event.inputs.confirm }}"
        
        echo "operation=$OPERATION" >> $GITHUB_OUTPUT
        
        # Check if destructive operations need confirmation
        if [[ "$OPERATION" == "cleanup" || "$OPERATION" == "deep-cleanup" || "$OPERATION" == "fresh-setup" || "$OPERATION" == "emergency" ]]; then
          if [ "$CONFIRM" != "CONFIRM" ]; then
            echo "‚ùå Destructive operation '$OPERATION' requires confirmation"
            echo "Please set confirm input to 'CONFIRM'"
            exit 1
          fi
          echo "confirmed=true" >> $GITHUB_OUTPUT
        else
          echo "confirmed=false" >> $GITHUB_OUTPUT
        fi
        
        echo "‚úÖ Operation validated: $OPERATION"

  maintenance:
    needs: validate
    runs-on: ubuntu-latest
    name: Execute Maintenance
    environment: production
    
    steps:
    - name: Setup SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        known_hosts: unnecessary
        
    - name: Add EC2 to known hosts
      run: ssh-keyscan -H ${{ secrets.EC2_PROD_HOST }} >> ~/.ssh/known_hosts
        
    - name: Execute Maintenance Operation
      env:
        EC2_HOST: ${{ secrets.EC2_PROD_HOST }}
        EC2_USER: ${{ secrets.EC2_USERNAME }}
        OPERATION: ${{ needs.validate.outputs.operation }}
        ANALYSIS_LEVEL: ${{ github.event.inputs.analysis_level }}
      run: |
        echo "üîß Executing maintenance operation: $OPERATION"
        
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'MAINTENANCE_EOF'
        set -e
        export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        
        cd /opt/restaurant-web || exit 1
        
        case "${{ env.OPERATION }}" in
          "inspect")
            echo "üîç COMPREHENSIVE EC2 INSPECTION"
            echo "==============================="
            
            # Download and run consolidated inspection script
            curl -sSL https://raw.githubusercontent.com/guiEmotiv/restaurant-web/main/scripts/ec2-inspector.sh -o inspector.sh
            chmod +x inspector.sh
            ./inspector.sh ${{ env.ANALYSIS_LEVEL }}
            rm -f inspector.sh
            ;;
            
          "cleanup"|"deep-cleanup"|"fresh-setup"|"emergency")
            echo "üîß CONSOLIDATED MAINTENANCE: ${{ env.OPERATION }}"
            echo "==============================================="
            
            # Download and run consolidated maintenance script
            curl -sSL https://raw.githubusercontent.com/guiEmotiv/restaurant-web/main/scripts/ec2-maintenance.sh -o maintenance.sh
            chmod +x maintenance.sh
            ./maintenance.sh ${{ env.OPERATION }} CONFIRM
            rm -f maintenance.sh
            ;;
            
          "restart")
            echo "üîÑ SERVICE RESTART"
            echo "=================="
            
            echo "üìä Current service status:"
            docker-compose --profile production ps || true
            
            echo "üîÑ Restarting services..."
            docker-compose --profile production restart
            
            sleep 20
            
            echo "üìä Post-restart status:"
            docker-compose --profile production ps
            ;;
            
          "health-check")
            echo "üè• HEALTH CHECK"
            echo "==============="
            
            echo "üìä Service status:"
            docker-compose --profile production ps
            
            echo ""
            echo "üîç Testing endpoints:"
            
            # Test direct app connection
            if curl -f -s http://localhost:8000/api/v1/health/ >/dev/null 2>&1; then
              echo "‚úÖ Direct app (port 8000): HEALTHY"
            else
              echo "‚ùå Direct app (port 8000): FAILED"
            fi
            
            # Test nginx proxy
            if curl -f -s http://localhost/api/v1/health/ >/dev/null 2>&1; then
              echo "‚úÖ Nginx proxy (port 80): HEALTHY"
            else
              echo "‚ùå Nginx proxy (port 80): FAILED"
            fi
            
            echo ""
            echo "üìã Recent logs:"
            docker-compose --profile production logs --tail=20
            
            echo ""
            echo "üíæ Disk usage:"
            df -h /
            ;;
            
          *)
            echo "‚ùå Unknown operation: ${{ env.OPERATION }}"
            exit 1
            ;;
        esac
        
        echo ""
        echo "‚úÖ Maintenance operation completed: ${{ env.OPERATION }}"
        MAINTENANCE_EOF

  report:
    needs: [validate, maintenance]
    runs-on: ubuntu-latest
    name: Maintenance Report
    if: always()
    
    steps:
    - name: Generate Report
      run: |
        echo "üîß MAINTENANCE OPERATION REPORT"
        echo "==============================="
        echo "Operation: ${{ needs.validate.outputs.operation }}"
        echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "Executed by: ${{ github.actor }}"
        
        if [[ "${{ needs.maintenance.result }}" == "success" ]]; then
          echo "Status: ‚úÖ SUCCESS"
          echo ""
          echo "Operation completed successfully."
          echo "Check the logs above for detailed results."
        else
          echo "Status: ‚ùå FAILED"
          echo ""
          echo "Operation failed. Check the logs above for error details."
          echo "You may need to:"
          echo "- Verify EC2 connectivity"
          echo "- Check disk space"
          echo "- Review service status manually"
          exit 1
        fi
        
        echo ""
        echo "üìß GitHub will send you an email notification about this operation."