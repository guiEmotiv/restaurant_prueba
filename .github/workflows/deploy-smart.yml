name: Smart Deploy to Production

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**' 
      - 'nginx/**'
      - 'docker-compose.yml'
      - 'Dockerfile'
      - '.github/workflows/deploy-smart.yml'
  workflow_dispatch:
    inputs:
      force_full_deploy:
        description: 'Force full deployment (ignore smart detection)'
        type: boolean
        default: false

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: restaurant-web

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    name: Detect Changes
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      nginx-changed: ${{ steps.changes.outputs.nginx }}
      docker-changed: ${{ steps.changes.outputs.docker }}
      should-build: ${{ steps.decide.outputs.should-build }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Detect file changes
      id: changes
      run: |
        echo "backend=$(git diff --name-only HEAD~1 HEAD | grep -q '^backend/' && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "frontend=$(git diff --name-only HEAD~1 HEAD | grep -q '^frontend/' && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "nginx=$(git diff --name-only HEAD~1 HEAD | grep -q '^nginx/' && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "docker=$(git diff --name-only HEAD~1 HEAD | grep -qE '^(Dockerfile|docker-compose)' && echo true || echo false)" >> $GITHUB_OUTPUT
        
    - name: Decide if build needed
      id: decide
      run: |
        if [[ "${{ steps.changes.outputs.backend }}" == "true" || "${{ steps.changes.outputs.frontend }}" == "true" || "${{ steps.changes.outputs.docker }}" == "true" || "${{ github.event.inputs.force_full_deploy }}" == "true" ]]; then
          echo "should-build=true" >> $GITHUB_OUTPUT
          echo "ðŸ”¨ Build required - code changes detected"
        else
          echo "should-build=false" >> $GITHUB_OUTPUT  
          echo "âš¡ No build needed - only config changes"
        fi

  build:
    needs: detect-changes
    runs-on: ubuntu-latest
    name: Build Docker Image
    if: needs.detect-changes.outputs.should-build == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Build frontend (optimized)
      run: |
        cd frontend
        npm ci --production=false
        NODE_OPTIONS='--max-old-space-size=4096' npm run build

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        # Use cache-friendly build
        docker build \
          --cache-from $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$(date +%Y%m%d-%H%M%S) \
          .
        
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$(date +%Y%m%d-%H%M%S)

  smart-deploy:
    needs: [detect-changes, build]
    runs-on: ubuntu-latest
    name: Smart Deployment
    if: always() && (needs.detect-changes.outputs.should-build == 'false' || needs.build.result == 'success')
    environment: production
    
    steps:
    - name: Setup SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        known_hosts: unnecessary
        
    - name: Add EC2 to known hosts
      run: ssh-keyscan -H ${{ secrets.EC2_PROD_HOST }} >> ~/.ssh/known_hosts
        
    - name: Execute Smart Deployment
      env:
        EC2_HOST: ${{ secrets.EC2_PROD_HOST }}
        EC2_USER: ${{ secrets.EC2_USERNAME }}
      run: |
        echo "ðŸ§  Executing smart deployment strategy..."
        
        # Upload smart deploy script
        curl -sSL https://raw.githubusercontent.com/guiEmotiv/restaurant-web/main/scripts/smart-deploy.sh > smart-deploy.sh
        chmod +x smart-deploy.sh
        scp smart-deploy.sh $EC2_USER@$EC2_HOST:/tmp/smart-deploy.sh
        
        # Execute smart deployment
        ssh -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'SMART_DEPLOY'
        export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        export ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        export ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
        
        # Create environment file
        cd /opt/restaurant-web
        cat > .env.ec2 << 'EOF'
        AWS_REGION=${{ env.AWS_REGION }}
        COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
        COGNITO_APP_CLIENT_ID=${{ secrets.COGNITO_APP_CLIENT_ID }}
        DATABASE_PATH=/opt/restaurant-web/data
        DATABASE_NAME=restaurant_prod.sqlite3
        DEBUG=False
        USE_COGNITO_AUTH=True
        ALLOWED_HOSTS=${{ secrets.EC2_PROD_HOST }},${{ secrets.DOMAIN_NAME }}
        SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
        DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
        EC2_PUBLIC_IP=${{ secrets.EC2_PROD_HOST }}
        EOF
        
        # Login to ECR
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
        
        # Run smart deployment
        chmod +x /tmp/smart-deploy.sh
        /tmp/smart-deploy.sh
        
        # Cleanup
        rm -f /tmp/smart-deploy.sh
        SMART_DEPLOY

  notify-success:
    needs: [detect-changes, build, smart-deploy]
    runs-on: ubuntu-latest
    name: Success Notification
    if: needs.smart-deploy.result == 'success'
    
    steps:
    - name: Deployment Success Summary
      run: |
        echo "ðŸŽ‰ SMART DEPLOYMENT SUCCESSFUL!"
        echo "================================"
        echo "Repository: restaurant-web (public)"
        echo "Strategy: Smart change detection"
        echo "Backend changed: ${{ needs.detect-changes.outputs.backend-changed }}"
        echo "Frontend changed: ${{ needs.detect-changes.outputs.frontend-changed }}"
        echo "Nginx changed: ${{ needs.detect-changes.outputs.nginx-changed }}"
        echo "Docker changed: ${{ needs.detect-changes.outputs.docker-changed }}"
        echo "Build required: ${{ needs.detect-changes.outputs.should-build }}"
        echo "Deployed by: ${{ github.actor }}"
        echo ""
        if [[ "${{ needs.detect-changes.outputs.should-build }}" == "true" ]]; then
          echo "âš¡ Full deployment completed"
        else
          echo "âš¡ Configuration-only deployment completed"
        fi
        echo "âœ… All services running optimally"