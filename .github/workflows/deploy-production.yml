name: Deploy to EC2 Production

on:
  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'docker/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - backend-only
          - frontend-only
          - rollback

env:
  # EC2 Configuration
  EC2_HOST: ${{ secrets.EC2_PROD_HOST }}
  EC2_USER: ${{ secrets.EC2_USERNAME }}
  
  # AWS ECR Configuration
  AWS_REGION: us-west-2
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-west-2.amazonaws.com
  ECR_REPOSITORY: restaurant-web

jobs:
  # ============================================
  # STEP 1: Build and Test
  # ============================================
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 📦 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 🧪 Test Frontend
        working-directory: frontend
        run: |
          npm ci
          npm run lint
          npm test -- --coverage --watchAll=false

      - name: 🏗️ Build Frontend
        working-directory: frontend
        run: |
          cat > .env.production << EOF
          VITE_AWS_REGION=${{ env.AWS_REGION }}
          VITE_AWS_COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
          VITE_AWS_COGNITO_APP_CLIENT_ID=${{ secrets.COGNITO_APP_CLIENT_ID }}
          VITE_API_URL=https://${{ secrets.DOMAIN_NAME }}
          EOF
          npm run build

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: 🧪 Test Backend
        working-directory: backend
        run: |
          pip install -r requirements.txt
          python manage.py test

      - name: 🔖 Generate metadata
        id: meta
        run: |
          echo "tags=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_OUTPUT
          echo "tags=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT

      - name: 🐳 Build Docker image for EC2 (AMD64)
        run: |
          docker build \
            --platform linux/amd64 \
            --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
            --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
            --file Dockerfile.prod \
            .

      - name: 📤 Push to ECR
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  # ============================================
  # STEP 2: Deploy to EC2
  # ============================================
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 📝 Create production environment file
        run: |
          cat > .env.production << 'EOF'
          # Production Environment Variables
          DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG=False
          ALLOWED_HOSTS=${{ env.EC2_HOST }},${{ secrets.DOMAIN_NAME }}
          DJANGO_ENV=production
          
          # PostgreSQL Configuration
          POSTGRES_HOST=postgres
          POSTGRES_PORT=5432
          POSTGRES_DB=restaurant_db
          POSTGRES_USER=restaurant_user
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          
          # AWS Cognito
          USE_COGNITO_AUTH=${{ secrets.USE_COGNITO_AUTH }}
          AWS_REGION=${{ env.AWS_REGION }}
          COGNITO_USER_POOL_ID=${{ secrets.COGNITO_USER_POOL_ID }}
          COGNITO_APP_CLIENT_ID=${{ secrets.COGNITO_APP_CLIENT_ID }}
          
          # AWS ECR
          ECR_REGISTRY=${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
          IMAGE_TAG=${{ github.sha }}
          EOF

      - name: 📤 Copy files to EC2
        run: |
          # Copy environment file
          scp .env.production ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/opt/restaurant-web/.env
          
          # Copy docker-compose production file
          scp docker-compose.production.yml ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/opt/restaurant-web/
          
          # Copy nginx configuration
          scp -r docker/nginx ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:/opt/restaurant-web/docker/

      - name: 🚀 Deploy on EC2
        run: |
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'DEPLOY_SCRIPT'
          set -e
          cd /opt/restaurant-web
          
          echo "🔐 Logging into ECR..."
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
            docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          
          echo "📥 Pulling latest images..."
          docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} restaurant-web:latest
          
          echo "🔄 Updating services..."
          docker-compose -f docker-compose.production.yml down
          docker-compose -f docker-compose.production.yml up -d
          
          echo "🧹 Cleaning old images..."
          docker image prune -f
          
          echo "✅ Deployment completed!"
          DEPLOY_SCRIPT

      - name: 🏥 Health check
        run: |
          sleep 30
          ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'HEALTH_CHECK'
          set -e
          
          # Check if containers are running
          echo "🐳 Checking containers..."
          docker ps
          
          # Test backend health
          echo "🔍 Testing backend..."
          curl -f http://localhost:8000/api/v1/health/ || exit 1
          
          # Test frontend
          echo "🔍 Testing frontend..."
          curl -f http://localhost/ || exit 1
          
          echo "✅ All health checks passed!"
          HEALTH_CHECK

      - name: 📊 Deployment summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Type:** ${{ github.event.inputs.deploy_type || 'full' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **EC2 Host:** ${{ env.EC2_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY