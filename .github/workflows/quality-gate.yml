name: Quality Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run nightly quality checks
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.12'

jobs:
  # Comprehensive Backend Testing
  backend-quality:
    name: Backend Quality Gate
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Set up test environment
      run: |
        cp .env.example .env 2>/dev/null || echo "DJANGO_SECRET_KEY=test-secret-key" > .env
        echo "DEBUG=True" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
    
    - name: Run migrations
      run: python manage.py migrate
    
    - name: Run comprehensive tests
      run: |
        pytest \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          --junitxml=pytest-results.xml \
          -v
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/pytest-results.xml
          backend/htmlcov/
    
    - name: Code quality checks
      run: |
        # Django system checks
        python manage.py check --deploy
        
        # Security checks
        bandit -r . -f json -o bandit-report.json
        
        # Dependency vulnerability checks
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json

  # Comprehensive Frontend Testing
  frontend-quality:
    name: Frontend Quality Gate
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting with error checking
      run: |
        npm run lint
        # Additional ESLint checks for best practices
        npx eslint src/ --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-report.json || true
    
    - name: Run comprehensive tests
      run: |
        npm run test:coverage
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: |
          frontend/coverage/
          frontend/eslint-report.json
    
    - name: Build and analyze
      run: |
        npm run build
        
        # Basic bundle size check
        du -sh dist/
        
        # List largest files
        find dist -name "*.js" -exec ls -lh {} \; | sort -k5 -hr | head -5
    
    - name: Security audit
      run: |
        npm audit --json > npm-audit.json || true
        # Show npm audit results
        npm audit || true
    
    - name: Upload build analysis
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-analysis
        path: |
          frontend/dist/
          frontend/npm-audit.json

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Set up test environment
      working-directory: ./backend
      run: |
        cp .env.example .env 2>/dev/null || echo "DJANGO_SECRET_KEY=test-secret-key" > .env
        echo "DEBUG=True" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
    
    - name: Run backend migrations
      working-directory: ./backend
      run: python manage.py migrate
    
    - name: Start backend server
      working-directory: ./backend
      run: |
        python manage.py runserver 8000 &
        echo $! > backend.pid
        sleep 10
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Run integration tests
      working-directory: ./backend
      run: |
        # Run integration tests that test full API endpoints
        pytest tests/ -m "integration" --maxfail=3 -v || true
    
    - name: API health check
      run: |
        # Basic API health check
        curl -f http://localhost:8000/api/v1/health/ || echo "API health check failed"
    
    - name: Cleanup
      if: always()
      run: |
        if [ -f backend/backend.pid ]; then
          kill $(cat backend/backend.pid) || true
        fi

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf]')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Build for performance testing
      working-directory: ./frontend
      run: npm run build
    
    - name: Run Lighthouse CI
      working-directory: ./frontend
      run: |
        npm install -g @lhci/cli
        # Simple build size analysis
        du -sh dist/
        find dist -name "*.js" -exec ls -lh {} \; | head -10
    
    - name: Bundle analyzer
      working-directory: ./frontend
      run: |
        # Simple bundle analysis with Vite
        echo "Bundle composition:"
        ls -lh dist/assets/ | grep -E '\.(js|css)$' || true
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: |
          frontend/dist/

  # Quality Summary
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, integration-tests]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Generate quality report
      run: |
        echo "## Quality Gate Summary" > quality-summary.md
        echo "" >> quality-summary.md
        echo "### Test Results" >> quality-summary.md
        
        # Check if tests passed
        if [ "${{ needs.backend-quality.result }}" == "success" ]; then
          echo "✅ Backend Quality: PASSED" >> quality-summary.md
        else
          echo "❌ Backend Quality: FAILED" >> quality-summary.md
        fi
        
        if [ "${{ needs.frontend-quality.result }}" == "success" ]; then
          echo "✅ Frontend Quality: PASSED" >> quality-summary.md
        else
          echo "❌ Frontend Quality: FAILED" >> quality-summary.md
        fi
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "✅ Integration Tests: PASSED" >> quality-summary.md
        else
          echo "❌ Integration Tests: FAILED" >> quality-summary.md
        fi
        
        echo "" >> quality-summary.md
        echo "### Artifacts Generated" >> quality-summary.md
        ls -la
        
        cat quality-summary.md
    
    - name: Upload quality summary
      uses: actions/upload-artifact@v4
      with:
        name: quality-summary
        path: quality-summary.md