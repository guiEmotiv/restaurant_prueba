name: Docker CI/CD

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and test using Docker
  docker-build-test:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    # Build backend image
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: backend-test:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Test backend in container
    - name: Test backend in container
      run: |
        docker run --rm \
          -v ${{ github.workspace }}/backend:/app \
          backend-test:latest \
          bash -c "
            python manage.py check &&
            pytest --maxfail=5 -q
          "
    
    # Build frontend
    - name: Build frontend
      run: |
        cd frontend
        docker run --rm \
          -v $(pwd):/app \
          -w /app \
          node:22-alpine \
          sh -c "
            npm ci &&
            npm run lint &&
            npm run test:ci &&
            npm run build
          "
    
    # Build production images - DISABLED until Dockerfile.prod exists
    # - name: Build and push production images
    #   if: github.event_name != 'pull_request'
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     file: ./Dockerfile.prod
    #     push: true
    #     tags: ${{ steps.meta.outputs.tags }}
    #     labels: ${{ steps.meta.outputs.labels }}
    #     cache-from: type=gha
    #     cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.restaurant-app.com
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build-test
    if: startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: production
      url: https://www.xn--elfogndedonsoto-zrb.com
    
    steps:
    - name: Deploy to production
      env:
        EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USER: ${{ secrets.EC2_USER }}
      run: |
        echo "Deploying to production EC2..."
        # Add production deployment commands here