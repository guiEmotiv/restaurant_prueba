name: üèóÔ∏è Total Rebuild Production Deployment

on:
  workflow_dispatch:
    inputs:
      rebuild_type:
        description: 'Type of rebuild'
        type: choice
        default: 'total-rebuild'
        options:
          - total-rebuild
          - emergency-rebuild
      confirm_data_sync:
        description: 'Confirm dev-to-prod data sync (DESTRUCTIVE)'
        type: boolean
        default: false
        required: true

env:
  AWS_REGION: us-west-2
  ECR_REGISTRY: 721063839441.dkr.ecr.us-west-2.amazonaws.com
  ECR_REPOSITORY: restaurant-web
  NODE_OPTIONS: '--max-old-space-size=4096'
  DOCKER_BUILDKIT: 1

jobs:
  # ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  # PRE-REBUILD VALIDATION
  # ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  
  pre-rebuild-validation:
    runs-on: ubuntu-latest
    name: üîç Pre-Rebuild Validation
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: ‚ö†Ô∏è Validate Destructive Operation
      run: |
        if [ "${{ github.event.inputs.confirm_data_sync }}" != "true" ]; then
          echo "‚ùå ERROR: You must confirm data sync operation"
          echo "This is a DESTRUCTIVE operation that will:"
          echo "  - Completely wipe production database"
          echo "  - Sync dev database to production" 
          echo "  - Rebuild entire application from scratch"
          echo ""
          echo "To proceed, set 'confirm_data_sync' to true"
          exit 1
        fi
        echo "‚úÖ Destructive operation confirmed - proceeding with total rebuild"
        
    - name: üîç Validate Repository State
      run: |
        echo "üìä Repository validation:"
        echo "  - Branch: $(git branch --show-current)"
        echo "  - Commit: $(git rev-parse --short HEAD)"
        echo "  - Files changed: $(git diff --name-only HEAD~1 HEAD | wc -l)"
        
        # Ensure we have the rebuild script
        if [ ! -f "scripts/total-rebuild-deploy.sh" ]; then
          echo "‚ùå Total rebuild script not found"
          exit 1
        fi
        echo "‚úÖ Total rebuild script found"

  # ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  # PRODUCTION IMAGE BUILD (IF NEEDED)
  # ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  
  build-production-image:
    needs: pre-rebuild-validation
    runs-on: ubuntu-latest
    name: üö¢ Build Production Image
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üîê Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: üö¢ Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: üíæ Setup Node.js for Frontend
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: üé® Build Frontend
      working-directory: frontend
      env:
        VITE_AWS_COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
        VITE_AWS_COGNITO_APP_CLIENT_ID: ${{ secrets.COGNITO_APP_CLIENT_ID }}
        VITE_DISABLE_COGNITO: false
      run: |
        echo "üé® Building optimized frontend for total rebuild..."
        npm ci --prefer-offline --no-audit
        npm run build
        echo "‚úÖ Frontend build completed"

    - name: üê≥ Build & Push Production Image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        VITE_AWS_COGNITO_USER_POOL_ID: ${{ secrets.COGNITO_USER_POOL_ID }}
        VITE_AWS_COGNITO_APP_CLIENT_ID: ${{ secrets.COGNITO_APP_CLIENT_ID }}
        VITE_DISABLE_COGNITO: false
      run: |
        echo "üê≥ Building production image for total rebuild..."
        
        # Build without cache for fresh image
        docker build \
          --no-cache \
          --build-arg VITE_AWS_COGNITO_USER_POOL_ID="$VITE_AWS_COGNITO_USER_POOL_ID" \
          --build-arg VITE_AWS_COGNITO_APP_CLIENT_ID="$VITE_AWS_COGNITO_APP_CLIENT_ID" \
          --build-arg VITE_DISABLE_COGNITO="$VITE_DISABLE_COGNITO" \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:rebuild-$(date +%Y%m%d-%H%M%S) \
          --file Dockerfile.prod .
        
        echo "üöÄ Pushing fresh production image..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:rebuild-$(date +%Y%m%d-%H%M%S)
        
        echo "‚úÖ Production image built and pushed successfully"

  # ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  # TOTAL REBUILD DEPLOYMENT TO EC2
  # ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  
  total-rebuild-deployment:
    needs: [pre-rebuild-validation, build-production-image]
    runs-on: ubuntu-latest
    name: üèóÔ∏è Total Rebuild Deployment
    environment: production
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üîê Setup SSH Connection
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_PROD_HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts

    - name: ‚ö†Ô∏è Pre-Rebuild System Check
      env:
        EC2_HOST: ${{ secrets.EC2_PROD_HOST }}
        EC2_USER: ${{ secrets.EC2_USERNAME }}
      run: |
        echo "üîç Checking production system before total rebuild..."
        ssh -o ConnectTimeout=30 $EC2_USER@$EC2_HOST << 'PRE_CHECK'
        set -e
        export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        
        # Check disk space (need at least 2GB free)
        AVAILABLE=$(df / | tail -1 | awk '{print $4}')
        if [ "$AVAILABLE" -lt 2048000 ]; then
          echo "‚ùå Insufficient disk space: ${AVAILABLE}KB available (need 2GB+)"
          exit 1
        fi
        
        # Check Docker daemon
        if ! docker info > /dev/null 2>&1; then
          echo "‚ùå Docker daemon not running"
          exit 1
        fi
        
        echo "‚úÖ System ready for total rebuild"
        echo "üìä Available disk space: ${AVAILABLE}KB"
        PRE_CHECK

    - name: üèóÔ∏è Execute Total Rebuild
      env:
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        EC2_HOST: ${{ secrets.EC2_PROD_HOST }}
        EC2_USER: ${{ secrets.EC2_USERNAME }}
      run: |
        echo "üèóÔ∏è Starting total rebuild deployment on EC2..."
        
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=60 $EC2_USER@$EC2_HOST << 'TOTAL_REBUILD'
        set -e
        export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
        export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        export AWS_DEFAULT_REGION="us-west-2"
        
        cd /opt/restaurant-web
        
        # Sync latest code including rebuild script
        echo "üì• Syncing latest code with rebuild scripts..."
        if ! git fetch origin main; then
          echo "‚ùå Failed to fetch from GitHub"
          exit 1
        fi
        if ! git reset --hard origin/main; then
          echo "‚ùå Failed to reset to latest main"
          exit 1
        fi
        echo "‚úÖ Code synchronized successfully"
        
        # Make rebuild script executable
        chmod +x scripts/total-rebuild-deploy.sh
        
        # Execute total rebuild with comprehensive logging
        echo "üöÄ Executing total rebuild deployment..."
        if ! ./scripts/total-rebuild-deploy.sh "${{ env.ECR_REGISTRY }}" "${{ env.ECR_REPOSITORY }}"; then
          echo "‚ùå Total rebuild failed - check logs for details"
          exit 1
        fi
        
        echo "‚úÖ Total rebuild completed successfully"
        TOTAL_REBUILD

  # ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  # POST-REBUILD VALIDATION
  # ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  
  post-rebuild-validation:
    needs: total-rebuild-deployment
    runs-on: ubuntu-latest
    name: üß™ Post-Rebuild Validation
    steps:
    - name: üîê Setup SSH Connection
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_PROD_HOST }} >> ~/.ssh/known_hosts
        chmod 644 ~/.ssh/known_hosts
        
    - name: üß™ Comprehensive Production Validation
      env:
        EC2_HOST: ${{ secrets.EC2_PROD_HOST }}
        EC2_USER: ${{ secrets.EC2_USERNAME }}
      run: |
        echo "üß™ Running comprehensive post-rebuild validation..."
        
        ssh -o ConnectTimeout=30 $EC2_USER@$EC2_HOST << 'VALIDATION'
        set -e
        export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        
        # Wait for services to fully stabilize
        echo "‚è≥ Waiting for services to stabilize..."
        sleep 45
        
        # Test critical API endpoints
        echo "üè• Testing critical API endpoints..."
        
        # Dashboard Operativo
        if curl -f -s -m 15 "http://localhost/api/v1/dashboard-operativo/report/?date=$(date +%Y-%m-%d)" > /dev/null; then
          echo "‚úÖ Dashboard Operativo API working"
        else
          echo "‚ùå Dashboard Operativo API failed"
          exit 1
        fi
        
        # Dashboard Financiero
        if curl -f -s -m 15 "http://localhost/api/v1/dashboard-financiero/report/?date=$(date +%Y-%m-%d)&period=month" > /dev/null; then
          echo "‚úÖ Dashboard Financiero API working"
        else
          echo "‚ùå Dashboard Financiero API failed"
          exit 1
        fi
        
        # Kitchen Board
        if curl -f -s -m 15 "http://localhost/api/v1/orders/kitchen_board/" > /dev/null; then
          echo "‚úÖ Kitchen Board API working"
        else
          echo "‚ùå Kitchen Board API failed"
          exit 1
        fi
        
        # Check container health
        UNHEALTHY=$(docker ps --filter "name=restaurant-web" --filter "health=unhealthy" -q)
        if [ -n "$UNHEALTHY" ]; then
          echo "‚ùå Unhealthy containers detected"
          docker ps --filter "name=restaurant-web"
          exit 1
        fi
        echo "‚úÖ All containers healthy"
        
        # Database integrity check
        if docker-compose -f docker/docker-compose.prod.yml run --rm app python manage.py check --database default; then
          echo "‚úÖ Database integrity verified"
        else
          echo "‚ùå Database integrity check failed"
          exit 1
        fi
        
        echo "üéâ ALL VALIDATION CHECKS PASSED - TOTAL REBUILD SUCCESSFUL!"
        VALIDATION

  # ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  # DEPLOYMENT SUMMARY
  # ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
  
  deployment-summary:
    needs: [pre-rebuild-validation, build-production-image, total-rebuild-deployment, post-rebuild-validation]
    runs-on: ubuntu-latest
    name: üìä Total Rebuild Summary
    if: always()
    steps:
    - name: üìä Generate Rebuild Summary
      run: |
        echo "## üèóÔ∏è Total Rebuild Production Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Rebuild Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Type:** ${{ github.event.inputs.rebuild_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Data Sync Confirmed:** ${{ github.event.inputs.confirm_data_sync }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** $(git rev-parse --short HEAD)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîÑ Rebuild Phases" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Phase 1:** Total System Cleanup" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Phase 2:** Database Rebuild with Dev Sync" >> $GITHUB_STEP_SUMMARY  
        echo "- ‚úÖ **Phase 3:** Complete Application Rebuild" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Phase 4:** Fresh Migrations & Data Integrity" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ **Phase 5:** Production Deployment & Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üåê Production System" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Live Site:** https://www.xn--elfogndedonsoto-zrb.com/" >> $GITHUB_STEP_SUMMARY
        echo "- **Database:** Rebuilt with dev data sync" >> $GITHUB_STEP_SUMMARY
        echo "- **Cache:** All caches cleared" >> $GITHUB_STEP_SUMMARY