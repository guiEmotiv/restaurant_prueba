#!/bin/bash
# Restaurant Web Deployment Manager - Expert Grade
# Usage: ./deploy [action] [options]

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m'

log() { echo -e "${BLUE}[$(date +'%H:%M:%S')]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

ACTION="${1:-help}"

show_help() {
    echo -e "${BOLD}Restaurant Web Deployment Manager${NC}"
    echo ""
    echo -e "${BOLD}USAGE:${NC}"
    echo "  ./deploy [action] [options]"
    echo ""
    echo -e "${BOLD}ACTIONS:${NC}"
    echo "  ${GREEN}dev${NC}          - Start local development environment"
    echo "  ${GREEN}build${NC}        - Build and test locally"
    echo "  ${GREEN}validate${NC}     - Validate migrations before deploy"
    echo "  ${GREEN}deploy${NC}       - Smart deployment to production"
    echo "  ${GREEN}emergency${NC}    - Emergency deployment (skip tests)"
    echo "  ${GREEN}status${NC}       - Check production status"
    echo "  ${GREEN}logs${NC}         - View production logs"
    echo "  ${GREEN}rollback${NC}     - Rollback to previous version"
    echo "  ${GREEN}cleanup${NC}      - Emergency disk cleanup"
    echo ""
    echo -e "${BOLD}EXAMPLES:${NC}"
    echo "  ./deploy dev              # Start local development"
    echo "  ./deploy build            # Build and test"
    echo "  ./deploy validate         # Check migrations"
    echo "  ./deploy deploy           # Smart production deployment"
    echo "  ./deploy emergency        # Emergency deploy (skip tests)"
    echo ""
}

case "$ACTION" in
    "help"|"-h"|"--help")
        show_help
        ;;
    "dev")
        log "üöÄ Starting local development environment"
        echo ""
        echo -e "${BOLD}Backend:${NC} cd backend && make run"
        echo -e "${BOLD}Frontend:${NC} cd frontend && npm run dev"
        echo ""
        echo "Choose your development mode:"
        echo "1. Backend only (API development)"
        echo "2. Frontend only (UI development)"  
        echo "3. Full stack (both services)"
        read -p "Select [1-3]: " choice
        
        case $choice in
            1) cd backend && make run ;;
            2) cd frontend && npm run dev ;;
            3) 
                echo "Starting backend in background..."
                cd backend && make run &
                BACKEND_PID=$!
                cd ../frontend
                echo "Starting frontend..."
                npm run dev
                kill $BACKEND_PID 2>/dev/null || true
                ;;
            *) warn "Invalid choice" ;;
        esac
        ;;
    "build")
        log "üèóÔ∏è Building and testing locally"
        
        # Frontend
        log "Building frontend..."
        cd frontend
        npm ci
        npm run lint
        npm run build
        cd ..
        success "Frontend build completed"
        
        # Backend  
        log "Testing backend..."
        cd backend
        python manage.py check
        python manage.py test
        cd ..
        success "Backend tests passed"
        ;;
    "validate")
        log "üî¨ Validating deployment readiness"
        
        # Check git status
        if ! git diff-index --quiet HEAD --; then
            warn "Uncommitted changes detected"
            git status --porcelain
            read -p "Continue anyway? [y/N]: " confirm
            [[ $confirm =~ ^[Yy]$ ]] || exit 1
        fi
        
        # Trigger validation workflow
        log "Triggering GitHub Actions validation..."
        gh workflow run "Restaurant Web Deployment" --field action=validate
        success "Validation triggered. Check GitHub Actions for results."
        ;;
    "deploy")
        log "üöÄ Starting smart production deployment"
        
        # Pre-flight checks
        git fetch origin
        if ! git diff-index --quiet HEAD --; then
            error "Please commit all changes before deploying"
        fi
        
        if [ "$(git rev-parse HEAD)" != "$(git rev-parse origin/main)" ]; then
            warn "Local branch is not in sync with origin/main"
            read -p "Push changes and continue? [y/N]: " confirm
            [[ $confirm =~ ^[Yy]$ ]] || exit 1
            git push origin main
        fi
        
        log "Triggering smart deployment workflow..."
        gh workflow run "Restaurant Web Deployment" --field action=deploy
        success "Smart deployment triggered. Monitor: gh run watch"
        ;;
    "emergency")
        warn "üö® Emergency deployment (skipping tests)"
        read -p "Are you sure? This bypasses all safety checks [y/N]: " confirm
        [[ $confirm =~ ^[Yy]$ ]] || exit 1
        
        log "Triggering emergency deployment..."
        gh workflow run "Restaurant Web Deployment" --field action=deploy --field skip_tests=true
        success "Emergency deployment triggered. Monitor: gh run watch"
        ;;
    "status")
        log "üìä Checking production status"
        gh workflow run "Restaurant Web Deployment" --field action=status
        ;;
    "logs")
        log "üìã Fetching production logs"
        gh workflow run "Restaurant Web Deployment" --field action=logs
        ;;
    "rollback")
        warn "‚è™ Rolling back to previous version"
        read -p "Confirm rollback? [y/N]: " confirm
        [[ $confirm =~ ^[Yy]$ ]] || exit 1
        gh workflow run "Restaurant Web Deployment" --field action=rollback
        ;;
    "cleanup")
        warn "üßπ Emergency disk cleanup"
        read -p "This will free disk space on production server. Continue? [y/N]: " confirm
        [[ $confirm =~ ^[Yy]$ ]] || exit 1
        gh workflow run "Restaurant Web Deployment" --field action=cleanup
        ;;
    *)
        error "Unknown action: $ACTION. Use './deploy help' for usage."
        ;;
esac